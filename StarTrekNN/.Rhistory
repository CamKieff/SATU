}
names(initialresults) <- names(working_df)
SSdif_df <- (initialresults - working_df)^2
numberToBeat <- mean((colSums(SSdif_df)/raw_AUC)[-1]) #initial average of sum of squares scaled to AUC
newparams <- init_params           #stores current best-fit parameters
for (j in 1:m){                    #number of iterations to find best fit
for(i in bestfit){
testparams <- newparams
testparams[[i]] <- abs(rnorm(n = 1, mean = newparams[[i]], sd = (sqrt(init_params[[i]]^2)*lambda)))
if(testparams[["m2max"]] > 1) { #hard coded limited for complex model params
testparams[["m2max"]] <- 1    #without the max limits, the model fails to converge
}
if(testparams[["chemax"]] > 1) {
testparams[["chemax"]] <- 1
}
if(testparams[["IC50che"]] > 10) { #these limits just keep the IC50s in physiologically relevant ranges
testparams[["IC50che"]] <- 10    #there is a local minima they can get stuck at around 20
}
if(testparams[["IC50m2"]] > 10) {
testparams[["IC50m2"]] <- 10
}
iteration_results <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, testparams, chosenmodel = thismodel)
iteration_results <- cbind(iteration_results, init_results1[,"eff2"])
}
names(iteration_results) <- names(working_df)
SSdif_df <-(iteration_results - working_df)^2
newNumber <- mean((colSums(SSdif_df)/raw_AUC)[-1])
if(newNumber < numberToBeat) { #test if the SS for the new model is better than the old model
newparams[i] <- testparams[i]
}
}
}
return(newparams) #return the best fit parameters.
}
find_allfreq_params <-function(HZdf, m = 50, bestfit, init_params, freq_list = c(0.1, 0.3, 1, 3, 10),
model = thismodel, hyper_params = c(2,0.1)){
testexp <- hyper_params[1]     #sum of "squares" exponent (must be even; 2 or 4 are probably optimal)
lambda <- hyper_params[2]      #learning rate
working_df <- HZdf %>% select(Time, paste0('X', freq_list, "HZ")
raw_AUC <- colSums(working_df) #find control data column sums for scaling
# find SS errors for initial parameters to find a number to beat
initialresults <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, init_params, chosenmodel = thismodel)
initialresults <- cbind(initialresults, init_results1[,"eff2"])
}
names(initialresults) <- names(working_df)
SSdif_df <- (initialresults - working_df)^2
numberToBeat <- mean((colSums(SSdif_df)/raw_AUC)[-1]) #initial average of sum of squares scaled to AUC
newparams <- init_params           #stores current best-fit parameters
for (j in 1:m){                    #number of iterations to find best fit
for(i in bestfit){
testparams <- newparams
testparams[[i]] <- abs(rnorm(n = 1, mean = newparams[[i]], sd = (sqrt(init_params[[i]]^2)*lambda)))
if(testparams[["m2max"]] > 1) { #hard coded limited for complex model params
testparams[["m2max"]] <- 1    #without the max limits, the model fails to converge
}
if(testparams[["chemax"]] > 1) {
testparams[["chemax"]] <- 1
}
if(testparams[["IC50che"]] > 10) { #these limits just keep the IC50s in physiologically relevant ranges
testparams[["IC50che"]] <- 10    #there is a local minima they can get stuck at around 20
}
if(testparams[["IC50m2"]] > 10) {
testparams[["IC50m2"]] <- 10
}
iteration_results <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, testparams, chosenmodel = thismodel)
iteration_results <- cbind(iteration_results, init_results1[,"eff2"])
}
names(iteration_results) <- names(working_df)
SSdif_df <-(iteration_results - working_df)^2
newNumber <- mean((colSums(SSdif_df)/raw_AUC)[-1])
if(newNumber < numberToBeat) { #test if the SS for the new model is better than the old model
newparams[i] <- testparams[i]
}
}
}
return(newparams) #return the best fit parameters.
}
find_allfreq_params <-function(HZdf, m = 50, bestfit, init_params, freq_list = c(0.1, 0.3, 1, 3, 10),
model = thismodel, hyper_params = c(2,0.1)){
testexp <- hyper_params[1]     #sum of "squares" exponent (must be even; 2 or 4 are probably optimal)
lambda <- hyper_params[2]      #learning rate
working_df <- HZdf %>% select(Time, paste0('X', freq_list, "HZ"))
raw_AUC <- colSums(working_df) #find control data column sums for scaling
# find SS errors for initial parameters to find a number to beat
initialresults <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, init_params, chosenmodel = thismodel)
initialresults <- cbind(initialresults, init_results1[,"eff2"])
}
names(initialresults) <- names(working_df)
SSdif_df <- (initialresults - working_df)^2
numberToBeat <- mean((colSums(SSdif_df)/raw_AUC)[-1]) #initial average of sum of squares scaled to AUC
newparams <- init_params           #stores current best-fit parameters
for (j in 1:m){                    #number of iterations to find best fit
for(i in bestfit){
testparams <- newparams
testparams[[i]] <- abs(rnorm(n = 1, mean = newparams[[i]], sd = (sqrt(init_params[[i]]^2)*lambda)))
if(testparams[["m2max"]] > 1) { #hard coded limited for complex model params
testparams[["m2max"]] <- 1    #without the max limits, the model fails to converge
}
if(testparams[["chemax"]] > 1) {
testparams[["chemax"]] <- 1
}
if(testparams[["IC50che"]] > 10) { #these limits just keep the IC50s in physiologically relevant ranges
testparams[["IC50che"]] <- 10    #there is a local minima they can get stuck at around 20
}
if(testparams[["IC50m2"]] > 10) {
testparams[["IC50m2"]] <- 10
}
iteration_results <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, testparams, chosenmodel = thismodel)
iteration_results <- cbind(iteration_results, init_results1[,"eff2"])
}
names(iteration_results) <- names(working_df)
SSdif_df <-(iteration_results - working_df)^2
newNumber <- mean((colSums(SSdif_df)/raw_AUC)[-1])
if(newNumber < numberToBeat) { #test if the SS for the new model is better than the old model
newparams[i] <- testparams[i]
}
}
}
return(newparams) #return the best fit parameters.
}
head(test)
control_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(control_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ")
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
control_EFSdata[[i]] <- df
print(paste0(as.character(EFSfileDB$CODE[i]), " ", max(df$X10HZ)-df$X10HZ[nrow(df)]))
}
control_EFSdata <- bind_rows(control_EFSdata)
control_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(control_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
control_EFSdata[[i]] <- df
print(paste0(as.character(EFSfileDB$CODE[i]), " ", max(df$X10HZ)-df$X10HZ[nrow(df)]))
}
control_EFSdata <- bind_rows(control_EFSdata)
View(control_EFSdata)
test <- control_EFSdata %>% select(ID = EFSfileDB$CODE[3])
test <- control_EFSdata %>% select(ID = as.character(EFSfileDB$CODE[3]))
test <- control_EFSdata %>% select(ID == as.character(EFSfileDB$CODE[3]))
as.character(EFSfileDB$CODE[3])
test <- control_EFSdata %>% select(ID = "2017-0118-B3")
test <- control_EFSdata %>% filter(ID = "2017-0118-B3")
test <- control_EFSdata %>% filter(ID == "2017-0118-B3")
head(test)
find_allfreq_params(test)
library(RxODE)
library(ggplot2)
library(plyr)
library(dplyr)
set.seed(1606)
setwd("~/GitHub/NervePKPDmodel")
source("defineModel.R")
source("runModelFunctions.R")
init_params <- c(KAach = 1, #ach model parameters
KEach = 1,
DVach = 6,
EC50ach = 5.383, #calculated from ACH constriction curves of isolated tracheas
m2max = 0.5, #complex model parameters
chemax = 0.5,
IC50m2 = 7,
IC50che = 7,
KAunk = 1, #unknown relaxant neurotransmitter parameters
KEunk = 1,
DVunk = 7,
EC50unk = 5,
MAXunk = 0)
thismodel <- defineModel(ACH_mod="simple", unk_mod="none", effect_mod = "oneNT") #what model
thismodel[[1]]$model
find_allfreq_params(test)
find_allfreq_params <-function(HZdf, m = 50, bestfit, init_params, freq_list = c(0.1, 0.3, 1, 3, 10),
model = thismodel, hyper_params = c(2,0.1)){
testexp <- hyper_params[1]     #sum of "squares" exponent (must be even; 2 or 4 are probably optimal)
lambda <- hyper_params[2]      #learning rate
working_df <- HZdf %>% select(Time, paste0('X', freq_list, "HZ"))
raw_AUC <- colSums(working_df) #find control data column sums for scaling
# find SS errors for initial parameters to find a number to beat
initialresults <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, init_params, chosenmodel = thismodel)
initialresults <- cbind(initialresults, init_results1[,"eff2"])
}
names(initialresults) <- names(working_df)
SSdif_df <- (initialresults - working_df)^2
numberToBeat <- mean((colSums(SSdif_df)/raw_AUC)[-1]) #initial average of sum of squares scaled to AUC
newparams <- init_params           #stores current best-fit parameters
for (j in 1:m){                    #number of iterations to find best fit
for(i in bestfit){
testparams <- newparams
testparams[[i]] <- abs(rnorm(n = 1, mean = newparams[[i]], sd = (sqrt(init_params[[i]]^2)*lambda)))
if(testparams[["m2max"]] > 1) { #hard coded limited for complex model params
testparams[["m2max"]] <- 1    #without the max limits, the model fails to converge
}
if(testparams[["chemax"]] > 1) {
testparams[["chemax"]] <- 1
}
if(testparams[["IC50che"]] > 10) { #these limits just keep the IC50s in physiologically relevant ranges
testparams[["IC50che"]] <- 10    #there is a local minima they can get stuck at around 20
}
if(testparams[["IC50m2"]] > 10) {
testparams[["IC50m2"]] <- 10
}
iteration_results <- working_df$Time
for (q in freq_list){
init_results1 <- run_mod1(q, testparams, chosenmodel = thismodel)
iteration_results <- cbind(iteration_results, init_results1[,"eff2"])
}
names(iteration_results) <- names(working_df)
SSdif_df <-(iteration_results - working_df)^2
newNumber <- mean((colSums(SSdif_df)/raw_AUC)[-1])
if(newNumber < numberToBeat) { #test if the SS for the new model is better than the old model
newparams[i] <- testparams[i]
}
}
}
return(newparams) #return the best fit parameters.
}
find_allfreq_params(test)
find_allfreq_params(test, init_params = init_params)
results <- find_allfreq_params(HZdf = test, init_params = init_params, bestfit = c("KAach", "KEach", "DVach"))
warnings()
run_mod1 <- function(stim_freq, mod_params, chosenmodel = thismodel, sampling_rate = 0.1){
parameters <- c(KA1 = mod_params[["KAunk"]],
KE1 = mod_params[["KEunk"]],
KA2 = mod_params[["KAach"]],
KE2 = mod_params[["KEach"]],
KA2f = mod_params[["m2max"]],
KE2f = mod_params[["chemax"]],
IC501 = 10^-mod_params[["IC50m2"]],
IC502 = 10^-mod_params[["IC50che"]],
max1 = mod_params[["MAXunk"]],
EC501 = 10^-mod_params[["EC50unk"]],
EC502 = 10^-mod_params[["EC50ach"]]
)
time_var <- 60 #length of stimulation in seconds
if (chosenmodel[[3]] == 2){
pulse_rate <- 1/stim_freq
num_doses <- time_var/pulse_rate
testev <- eventTable(amount.units="mol", time.unit="seconds")
testev$add.dosing(dose = 10^-mod_params[["DVunk"]], nbr.doses = num_doses, dosing.interval = pulse_rate, dosing.to = 1, start.time = 0)
testev$add.dosing(dose = 10^-mod_params[["DVach"]], nbr.doses = num_doses, dosing.interval = pulse_rate, dosing.to = 3, start.time = 0)
testev$add.sampling(seq(from = 0, to = time_var, by = sampling_rate))
} else if(chosenmodel[[3]] == 1){
if(stim_freq < 0.1){
pulse_rate <- 1/stim_freq
num_doses <- time_var/pulse_rate + 1
} else{
pulse_rate <- 1/stim_freq
num_doses <- time_var/pulse_rate
}
testev <- eventTable(amount.units="mol", time.unit="seconds")
testev$add.dosing(dose = 10^-mod_params[["DVach"]], nbr.doses = num_doses, dosing.interval = pulse_rate, dosing.to = 1, start.time = 0)
testev$add.sampling(seq(from = 0, to = time_var, by = sampling_rate))
} else(
print("Model does not currently support more than two neurotransmitters (NT). Please set NT equal to either 1 or 2.")
)
finalres <- chosenmodel[[1]]$solve(parameters, testev, chosenmodel[[2]]) #this actually solves the model
return(finalres)
}
results <- find_allfreq_params(HZdf = test, init_params = init_params, bestfit = c("KAach", "KEach", "DVach"))
results
g1 <- ggplot(control_EFSdata[, c("Time", "X1HZ", "ID")], aes(x=Time, y = X1HZ, color = ID))
g1 <- g1 + geom_line()
g1
View(EFSfileDB)
EFSfileDB <- read.csv("EFSfileDB.csv", header = TRUE) %>% filter(TISSUE = "L")
EFSfileDB <- read.csv("EFSfileDB.csv", header = TRUE) %>% filter(TISSUE == "L")
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(control_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
control_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(control_EFSdata)
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(control_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
control_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
View(EFSfileDB)
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
View(Lcontrol_EFSdata)
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X1HZ", "ID")], aes(x=Time, y = X1HZ, color = ID))
g1 <- g1 + geom_line()
g1
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X10HZ", "ID")], aes(x=Time, y = X10HZ, color = ID))
g1 <- g1 + geom_line()
g1
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X3HZ", "ID")], aes(x=Time, y = X3HZ, color = ID))
g1 <- g1 + geom_line()
g1
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
# df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
df <- df %>% mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X3HZ", "ID")], aes(x=Time, y = X3HZ, color = ID))
g1 <- g1 + geom_line()
g1
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X10HZ", "ID")], aes(x=Time, y = X10HZ, color = ID))
g1 <- g1 + geom_line()
g1
EFSfileDB <- read.csv("EFSfileDB.csv", header = TRUE) %>% filter(TISSUE == "U")
freq_list <- c(0.1, 0.3, 1, 3, 10)
#EFSfiles$DATE <- as.Date(EFSfiles$DATE, format = "%Y-%m%d")
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
# df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
df <- df %>% mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X10HZ", "ID")], aes(x=Time, y = X10HZ, color = ID))
g1 <- g1 + geom_line()
g1
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X10HZ", "ID")], aes(x=Time, y = X10HZ, color = ID))
g1 <- g1 + geom_line()
g1
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
X0.1HZ_max <- max(df$X0.1HZ)
#df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(X0.1HZ_max-df_min)}) %>%
mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X10HZ", "ID")], aes(x=Time, y = X10HZ, color = ID))
g1 <- g1 + geom_line()
g1
EFSfileDB <- read.csv("EFSfileDB.csv", header = TRUE) %>% filter(TISSUE == "L")
freq_list <- c(0.1, 0.3, 1, 3, 10)
#EFSfiles$DATE <- as.Date(EFSfiles$DATE, format = "%Y-%m%d")
Lcontrol_EFSdata <- vector("list", length=nrow(EFSfileDB))
for (i in 1:length(Lcontrol_EFSdata)){
df <- read.csv(as.character(EFSfileDB$CONTROL_FILE[i]), header = TRUE)
df <- df %>% filter(Time <= 60 & (Time*10) %% 1 == 0) %>%
select(Time, paste0('X', freq_list, "HZ"))
df_min <- min(df[, 2:ncol(df)])
df_max <- max(df[, 2:ncol(df)])
X0.1HZ_max <- max(df$X0.1HZ)
#df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(EFSfileDB$KCL[i])}) %>%
df <- df %>% mutate_at(vars(-Time), function(x){(x-df_min)/(X0.1HZ_max-df_min)}) %>%
mutate(ID = EFSfileDB$CODE[i])
Lcontrol_EFSdata[[i]] <- df
}
Lcontrol_EFSdata <- bind_rows(Lcontrol_EFSdata)
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X10HZ", "ID")], aes(x=Time, y = X10HZ, color = ID))
g1 <- g1 + geom_line()
g1
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X3HZ", "ID")], aes(x=Time, y = X3HZ, color = ID))
g1 <- g1 + geom_line()
g1
g1 <- ggplot(Lcontrol_EFSdata[, c("Time", "X1HZ", "ID")], aes(x=Time, y = X1HZ, color = ID))
g1 <- g1 + geom_line()
g1
g2 <- facetgraph(conDF = test, init_params = init_params, bestfit = c("KAach", "KEach", "DVach"))
g2 <- facetgraph(conDF = test, init_params = init_params, consensus_params = results, bestfit = c("KAach", "KEach", "DVach"))
results <- find_allfreq_params(HZdf = test, init_params = init_params, bestfit = c("KAach", "KEach", "DVach"), consensus = TRUE)
results <- find_allfreq_params(HZdf = test, init_params = init_params, bestfit = c("KAach", "KEach", "DVach"), freq_list = c(0.1, 0.3, 1, 3, 10), consensus = TRUE)
g2 <- facetgraph(conDF = test, init_params = init_params, consensus_params = results, bestfit = c("KAach", "KEach", "DVach"), consensus = TRUE, freq_list = freq_list)
facetgraph <- function(conDF, init_params, consensus_params, bestfit,
freq_list = c(0.1, 0.3, 0.7, 1, 3, 10, 15, 30),
consensus = FALSE, chosenmodel = thismodel){
facetDF <-NULL
for (i in freq_list){
working_freq <- i
if(working_freq < 0.2){
initialresults <- run_mod1(stim_freq = working_freq, init_params, chosenmodel = thismodel)
consensusresults <- run_mod1(stim_freq = working_freq, consensus_params, chosenmodel = thismodel)
working_freq <- 0.1
} else{
initialresults <- run_mod1(stim_freq = working_freq, init_params, chosenmodel = thismodel)
consensusresults <- run_mod1(stim_freq = working_freq, consensus_params, chosenmodel = thismodel)
}
if(consensus == TRUE){
plotDF <- data.frame(rep(working_freq, length(initialresults)), initialresults[,"time"], conDF[1:length(initialresults[,"time"]),paste0("X", working_freq, "HZ")], initialresults[,"eff2"],consensusresults[,"eff2"])
} else{
finalparams <- final_drug_params(stim_freq = working_freq, m = 500, conDF, bestfit = bestfit, init_params, initialresults)
finalresults <- run_mod1(stim_freq = working_freq, finalparams[nrow(finalparams),], chosenmodel = chosenmodel)
plotDF <- data.frame(rep(working_freq, length(finalresults)), initialresults[,"time"], conDF[1:length(initialresults[,"time"]),paste0("X", working_freq, "HZ")], initialresults[,"eff2"], finalresults[,"eff2"])
}
facetDF <- rbind(plotDF, facetDF)
}
if(consensus == TRUE){
colnames(facetDF)<-c("Freq", "Time", "Raw", "Initial", "Consensus")
p <- (ggplot(facetDF)
+ geom_line(aes(x=Time, y=Raw), color="black", alpha = 0.5)
+ geom_line(aes(x=Time, y=Consensus), color="blue",size = 1)
+ geom_line(aes(x=Time, y=Initial), color="red",size = 1)
#+ facet_wrap(~ Freq, scales="free", ncol=3)
+ facet_wrap(~ Freq, ncol=3)
+ scale_y_continuous(limits = c(0, 1))
+ theme_bw()
)
} else{
colnames(facetDF)<-c("Freq", "Time", "Raw", "Initial", "Final")
p <- (ggplot(facetDF)
+ geom_line(aes(x=Time, y=Raw), color="black", alpha = 0.5)
+ geom_line(aes(x=Time, y=Initial), color="green",size = 1)
+ geom_line(aes(x=Time, y=Final), color="red",size = 1)
+ facet_wrap(~ Freq, scales="free", ncol=3)
+ theme_bw()
)
}
p
}
g2 <- facetgraph(conDF = test, init_params = init_params, consensus_params = results, bestfit = c("KAach", "KEach", "DVach"), consensus = TRUE, freq_list = freq_list)
g2
install.packages('markovchain')
install.packages("markovchain")
install.packages("markovchain")
install.packages("markovchain")
install.packages(c("SnowballC", "tidytext", "tidyverse", "tm", "topicmodels"))
install.packages(c("SnowballC", "tidytext", "tidyverse", "tm", "topicmodels"))
library(markovchain)
setwd("~/GitHub/SATU/StarTrekNN")
text <- readLines('alloutput_edit.txt')
text <- readLines('alloutput_edit.txt')
text <- text[nchar(text) > 0]
text <- gsub('.', ' .', text, fixed = TRUE)
text <- gsub(',', ' ,', text, fixed = TRUE)
text <- gsub('!', ' !', text, fixed = TRUE)
text <- gsub('(', '( ', text, fixed = TRUE)
text <- gsub(')', ' )', text, fixed = TRUE)
terms <- unlist(strsplit(text, ' '))
fit <- markovchainFit(data = terms)
plot(fit$estimate)
paste(markovchainSequence(n=50, markovchain=fit$estimate), collapse=' ')
